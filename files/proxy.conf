# Managed by the web_nginx role
#
# Purpose:
#   Safe, sane default proxy headers for reverse-proxy locations.
#   These headers preserve the original client/connection info so upstream
#   apps (and logs) can reconstruct the true request context.
#
# Where to include:
#   - http {}, server {}, or location {} contexts (location is typical).
#
# Notes:
#   - `Host` forwards the original host header (important for virtual hosts).
#   - `X-Real-IP` and `X-Forwarded-For` allow the app to see the clientâ€™s IP.
#   - `X-Forwarded-Proto` signals whether the original scheme was http/https.
#   - You may also want `X-Forwarded-Host` and `X-Forwarded-Port` depending on
#     your upstream framework (examples commented below).
#   - WebSocket upgrades need extra headers; see the example at the end.

# Preserve the original Host header (critical for upstream virtual-host routing)
proxy_set_header Host $host;

# Pass the direct client IP (single address)
proxy_set_header X-Real-IP $remote_addr;

# Pass the full chain of client IPs through proxies/load balancers
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

# Indicate original scheme so upstream can generate absolute URLs correctly
proxy_set_header X-Forwarded-Proto $scheme;

# --- Optional extras ---------------------------------------------------------
# Forward the original host header explicitly (some apps prefer this form)
# proxy_set_header X-Forwarded-Host $host;

# Forward the original port (useful behind TLS offload or non-standard ports)
# proxy_set_header X-Forwarded-Port $server_port;

# Avoid rewriting Location headers unless you know you need it
# proxy_redirect off;

# If your upstream needs HTTP/1.1 for keepalive/chunked responses:
# proxy_http_version 1.1;
# proxy_set_header Connection "";

# --- WebSocket example (uncomment in a specific `location` ONLY) -------------
# proxy_set_header Upgrade $http_upgrade;
# proxy_set_header Connection "upgrade";
# proxy_read_timeout  600s;
# proxy_send_timeout  600s;
